
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000914  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000aa8  08000aa8  00010aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ab8  08000ab8  00010ac0  2**0
                  CONTENTS
  4 .ARM          00000000  08000ab8  08000ab8  00010ac0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ab8  08000ac0  00010ac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ab8  08000ab8  00010ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000abc  08000abc  00010abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000ac0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000ac0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010ac0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000e5d  00000000  00000000  00010aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000342  00000000  00000000  00011947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f0  00000000  00000000  00011c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000c8  00000000  00000000  00011d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000021ce  00000000  00000000  00011e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000124f  00000000  00000000  00014016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009428  00000000  00000000  00015265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001e68d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000032c  00000000  00000000  0001e6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000a90 	.word	0x08000a90

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000a90 	.word	0x08000a90

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <GPIO_PeriClockControl>:
 * @Note             -  None
 * 
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)

{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	460b      	mov	r3, r1
 80001ee:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE){
 80001f0:	78fb      	ldrb	r3, [r7, #3]
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d141      	bne.n	800027a <GPIO_PeriClockControl+0x96>
        if(pGPIOx == GPIOA){
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4a55      	ldr	r2, [pc, #340]	; (8000350 <GPIO_PeriClockControl+0x16c>)
 80001fa:	4293      	cmp	r3, r2
 80001fc:	d106      	bne.n	800020c <GPIO_PeriClockControl+0x28>
             GPIOA_PCLK_EN();
 80001fe:	4b55      	ldr	r3, [pc, #340]	; (8000354 <GPIO_PeriClockControl+0x170>)
 8000200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000202:	4a54      	ldr	r2, [pc, #336]	; (8000354 <GPIO_PeriClockControl+0x170>)
 8000204:	f043 0301 	orr.w	r3, r3, #1
 8000208:	6313      	str	r3, [r2, #48]	; 0x30
            GPIOH_PCLK_DI();
        }

    }

}
 800020a:	e09b      	b.n	8000344 <GPIO_PeriClockControl+0x160>
        }else if(pGPIOx == GPIOB){
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	4a52      	ldr	r2, [pc, #328]	; (8000358 <GPIO_PeriClockControl+0x174>)
 8000210:	4293      	cmp	r3, r2
 8000212:	d106      	bne.n	8000222 <GPIO_PeriClockControl+0x3e>
            GPIOB_PCLK_EN();
 8000214:	4b4f      	ldr	r3, [pc, #316]	; (8000354 <GPIO_PeriClockControl+0x170>)
 8000216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000218:	4a4e      	ldr	r2, [pc, #312]	; (8000354 <GPIO_PeriClockControl+0x170>)
 800021a:	f043 0302 	orr.w	r3, r3, #2
 800021e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000220:	e090      	b.n	8000344 <GPIO_PeriClockControl+0x160>
        }else if(pGPIOx == GPIOC){
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	4a4d      	ldr	r2, [pc, #308]	; (800035c <GPIO_PeriClockControl+0x178>)
 8000226:	4293      	cmp	r3, r2
 8000228:	d106      	bne.n	8000238 <GPIO_PeriClockControl+0x54>
            GPIOC_PCLK_EN();
 800022a:	4b4a      	ldr	r3, [pc, #296]	; (8000354 <GPIO_PeriClockControl+0x170>)
 800022c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022e:	4a49      	ldr	r2, [pc, #292]	; (8000354 <GPIO_PeriClockControl+0x170>)
 8000230:	f043 0304 	orr.w	r3, r3, #4
 8000234:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000236:	e085      	b.n	8000344 <GPIO_PeriClockControl+0x160>
        }else if(pGPIOx == GPIOD){
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4a49      	ldr	r2, [pc, #292]	; (8000360 <GPIO_PeriClockControl+0x17c>)
 800023c:	4293      	cmp	r3, r2
 800023e:	d106      	bne.n	800024e <GPIO_PeriClockControl+0x6a>
            GPIOD_PCLK_EN();
 8000240:	4b44      	ldr	r3, [pc, #272]	; (8000354 <GPIO_PeriClockControl+0x170>)
 8000242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000244:	4a43      	ldr	r2, [pc, #268]	; (8000354 <GPIO_PeriClockControl+0x170>)
 8000246:	f043 0308 	orr.w	r3, r3, #8
 800024a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800024c:	e07a      	b.n	8000344 <GPIO_PeriClockControl+0x160>
        }else if(pGPIOx == GPIOE){
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4a44      	ldr	r2, [pc, #272]	; (8000364 <GPIO_PeriClockControl+0x180>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d106      	bne.n	8000264 <GPIO_PeriClockControl+0x80>
            GPIOE_PCLK_EN();
 8000256:	4b3f      	ldr	r3, [pc, #252]	; (8000354 <GPIO_PeriClockControl+0x170>)
 8000258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025a:	4a3e      	ldr	r2, [pc, #248]	; (8000354 <GPIO_PeriClockControl+0x170>)
 800025c:	f043 0310 	orr.w	r3, r3, #16
 8000260:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000262:	e06f      	b.n	8000344 <GPIO_PeriClockControl+0x160>
        }else if(pGPIOx == GPIOH){
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	4a40      	ldr	r2, [pc, #256]	; (8000368 <GPIO_PeriClockControl+0x184>)
 8000268:	4293      	cmp	r3, r2
 800026a:	d16b      	bne.n	8000344 <GPIO_PeriClockControl+0x160>
            GPIOH_PCLK_EN();
 800026c:	4b39      	ldr	r3, [pc, #228]	; (8000354 <GPIO_PeriClockControl+0x170>)
 800026e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000270:	4a38      	ldr	r2, [pc, #224]	; (8000354 <GPIO_PeriClockControl+0x170>)
 8000272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000276:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000278:	e064      	b.n	8000344 <GPIO_PeriClockControl+0x160>
        if(pGPIOx == GPIOA){
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4a34      	ldr	r2, [pc, #208]	; (8000350 <GPIO_PeriClockControl+0x16c>)
 800027e:	4293      	cmp	r3, r2
 8000280:	d10c      	bne.n	800029c <GPIO_PeriClockControl+0xb8>
            GPIOA_PCLK_DI();
 8000282:	4b34      	ldr	r3, [pc, #208]	; (8000354 <GPIO_PeriClockControl+0x170>)
 8000284:	691b      	ldr	r3, [r3, #16]
 8000286:	4a33      	ldr	r2, [pc, #204]	; (8000354 <GPIO_PeriClockControl+0x170>)
 8000288:	f043 0301 	orr.w	r3, r3, #1
 800028c:	6113      	str	r3, [r2, #16]
 800028e:	4b31      	ldr	r3, [pc, #196]	; (8000354 <GPIO_PeriClockControl+0x170>)
 8000290:	691b      	ldr	r3, [r3, #16]
 8000292:	4a30      	ldr	r2, [pc, #192]	; (8000354 <GPIO_PeriClockControl+0x170>)
 8000294:	f023 0301 	bic.w	r3, r3, #1
 8000298:	6113      	str	r3, [r2, #16]
}
 800029a:	e053      	b.n	8000344 <GPIO_PeriClockControl+0x160>
        }else if(pGPIOx == GPIOB){
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	4a2e      	ldr	r2, [pc, #184]	; (8000358 <GPIO_PeriClockControl+0x174>)
 80002a0:	4293      	cmp	r3, r2
 80002a2:	d10c      	bne.n	80002be <GPIO_PeriClockControl+0xda>
            GPIOB_PCLK_DI();
 80002a4:	4b2b      	ldr	r3, [pc, #172]	; (8000354 <GPIO_PeriClockControl+0x170>)
 80002a6:	691b      	ldr	r3, [r3, #16]
 80002a8:	4a2a      	ldr	r2, [pc, #168]	; (8000354 <GPIO_PeriClockControl+0x170>)
 80002aa:	f043 0302 	orr.w	r3, r3, #2
 80002ae:	6113      	str	r3, [r2, #16]
 80002b0:	4b28      	ldr	r3, [pc, #160]	; (8000354 <GPIO_PeriClockControl+0x170>)
 80002b2:	691b      	ldr	r3, [r3, #16]
 80002b4:	4a27      	ldr	r2, [pc, #156]	; (8000354 <GPIO_PeriClockControl+0x170>)
 80002b6:	f023 0302 	bic.w	r3, r3, #2
 80002ba:	6113      	str	r3, [r2, #16]
}
 80002bc:	e042      	b.n	8000344 <GPIO_PeriClockControl+0x160>
        }else if(pGPIOx == GPIOC){
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a26      	ldr	r2, [pc, #152]	; (800035c <GPIO_PeriClockControl+0x178>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d10c      	bne.n	80002e0 <GPIO_PeriClockControl+0xfc>
            GPIOC_PCLK_DI();
 80002c6:	4b23      	ldr	r3, [pc, #140]	; (8000354 <GPIO_PeriClockControl+0x170>)
 80002c8:	691b      	ldr	r3, [r3, #16]
 80002ca:	4a22      	ldr	r2, [pc, #136]	; (8000354 <GPIO_PeriClockControl+0x170>)
 80002cc:	f043 0304 	orr.w	r3, r3, #4
 80002d0:	6113      	str	r3, [r2, #16]
 80002d2:	4b20      	ldr	r3, [pc, #128]	; (8000354 <GPIO_PeriClockControl+0x170>)
 80002d4:	691b      	ldr	r3, [r3, #16]
 80002d6:	4a1f      	ldr	r2, [pc, #124]	; (8000354 <GPIO_PeriClockControl+0x170>)
 80002d8:	f023 0304 	bic.w	r3, r3, #4
 80002dc:	6113      	str	r3, [r2, #16]
}
 80002de:	e031      	b.n	8000344 <GPIO_PeriClockControl+0x160>
        }else if(pGPIOx == GPIOD){
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4a1f      	ldr	r2, [pc, #124]	; (8000360 <GPIO_PeriClockControl+0x17c>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d10c      	bne.n	8000302 <GPIO_PeriClockControl+0x11e>
            GPIOD_PCLK_DI();
 80002e8:	4b1a      	ldr	r3, [pc, #104]	; (8000354 <GPIO_PeriClockControl+0x170>)
 80002ea:	691b      	ldr	r3, [r3, #16]
 80002ec:	4a19      	ldr	r2, [pc, #100]	; (8000354 <GPIO_PeriClockControl+0x170>)
 80002ee:	f043 0308 	orr.w	r3, r3, #8
 80002f2:	6113      	str	r3, [r2, #16]
 80002f4:	4b17      	ldr	r3, [pc, #92]	; (8000354 <GPIO_PeriClockControl+0x170>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4a16      	ldr	r2, [pc, #88]	; (8000354 <GPIO_PeriClockControl+0x170>)
 80002fa:	f023 0308 	bic.w	r3, r3, #8
 80002fe:	6113      	str	r3, [r2, #16]
}
 8000300:	e020      	b.n	8000344 <GPIO_PeriClockControl+0x160>
        }else if(pGPIOx == GPIOE){
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a17      	ldr	r2, [pc, #92]	; (8000364 <GPIO_PeriClockControl+0x180>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d10c      	bne.n	8000324 <GPIO_PeriClockControl+0x140>
            GPIOE_PCLK_DI();
 800030a:	4b12      	ldr	r3, [pc, #72]	; (8000354 <GPIO_PeriClockControl+0x170>)
 800030c:	691b      	ldr	r3, [r3, #16]
 800030e:	4a11      	ldr	r2, [pc, #68]	; (8000354 <GPIO_PeriClockControl+0x170>)
 8000310:	f043 0310 	orr.w	r3, r3, #16
 8000314:	6113      	str	r3, [r2, #16]
 8000316:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <GPIO_PeriClockControl+0x170>)
 8000318:	691b      	ldr	r3, [r3, #16]
 800031a:	4a0e      	ldr	r2, [pc, #56]	; (8000354 <GPIO_PeriClockControl+0x170>)
 800031c:	f023 0310 	bic.w	r3, r3, #16
 8000320:	6113      	str	r3, [r2, #16]
}
 8000322:	e00f      	b.n	8000344 <GPIO_PeriClockControl+0x160>
        }else if(pGPIOx == GPIOH){
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4a10      	ldr	r2, [pc, #64]	; (8000368 <GPIO_PeriClockControl+0x184>)
 8000328:	4293      	cmp	r3, r2
 800032a:	d10b      	bne.n	8000344 <GPIO_PeriClockControl+0x160>
            GPIOH_PCLK_DI();
 800032c:	4b09      	ldr	r3, [pc, #36]	; (8000354 <GPIO_PeriClockControl+0x170>)
 800032e:	691b      	ldr	r3, [r3, #16]
 8000330:	4a08      	ldr	r2, [pc, #32]	; (8000354 <GPIO_PeriClockControl+0x170>)
 8000332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000336:	6113      	str	r3, [r2, #16]
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <GPIO_PeriClockControl+0x170>)
 800033a:	691b      	ldr	r3, [r3, #16]
 800033c:	4a05      	ldr	r2, [pc, #20]	; (8000354 <GPIO_PeriClockControl+0x170>)
 800033e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000342:	6113      	str	r3, [r2, #16]
}
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40020000 	.word	0x40020000
 8000354:	40023800 	.word	0x40023800
 8000358:	40020400 	.word	0x40020400
 800035c:	40020800 	.word	0x40020800
 8000360:	40020c00 	.word	0x40020c00
 8000364:	40021000 	.word	0x40021000
 8000368:	40021c00 	.word	0x40021c00

0800036c <GPIO_INIT>:
 * @Note             -  None
 * 
 */

void GPIO_INIT(GPIO_Handle *pGPIO_Handle)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]
    //0. Enable_prepheral_clock
    GPIO_PeriClockControl(pGPIO_Handle->pGPIOx, ENABLE);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	2101      	movs	r1, #1
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff ff30 	bl	80001e4 <GPIO_PeriClockControl>
    //1. Configure the mode of gpio pin
    if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	795b      	ldrb	r3, [r3, #5]
 8000388:	2b03      	cmp	r3, #3
 800038a:	d81f      	bhi.n	80003cc <GPIO_INIT+0x60>
        // non intruppt mode
        temp = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	795b      	ldrb	r3, [r3, #5]
 8000390:	461a      	mov	r2, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	791b      	ldrb	r3, [r3, #4]
 8000396:	005b      	lsls	r3, r3, #1
 8000398:	fa02 f303 	lsl.w	r3, r2, r3
 800039c:	617b      	str	r3, [r7, #20]
        pGPIO_Handle->pGPIOx->MODER &= ~(0x3 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);                                           /*<It's clearing two bits before writing on it>*/
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	791b      	ldrb	r3, [r3, #4]
 80003a8:	4619      	mov	r1, r3
 80003aa:	2303      	movs	r3, #3
 80003ac:	408b      	lsls	r3, r1
 80003ae:	43db      	mvns	r3, r3
 80003b0:	4619      	mov	r1, r3
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	400a      	ands	r2, r1
 80003b8:	601a      	str	r2, [r3, #0]
        pGPIO_Handle->pGPIOx->MODER |= temp;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	6819      	ldr	r1, [r3, #0]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	697a      	ldr	r2, [r7, #20]
 80003c6:	430a      	orrs	r2, r1
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	e09b      	b.n	8000504 <GPIO_INIT+0x198>

    }else{
	// interrupt mode
    	    if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	795b      	ldrb	r3, [r3, #5]
 80003d0:	2b04      	cmp	r3, #4
 80003d2:	d117      	bne.n	8000404 <GPIO_INIT+0x98>
				EXTI->FTSR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80003d4:	4b99      	ldr	r3, [pc, #612]	; (800063c <GPIO_INIT+0x2d0>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	7912      	ldrb	r2, [r2, #4]
 80003dc:	4611      	mov	r1, r2
 80003de:	2201      	movs	r2, #1
 80003e0:	408a      	lsls	r2, r1
 80003e2:	4611      	mov	r1, r2
 80003e4:	4a95      	ldr	r2, [pc, #596]	; (800063c <GPIO_INIT+0x2d0>)
 80003e6:	430b      	orrs	r3, r1
 80003e8:	60d3      	str	r3, [r2, #12]
				EXTI->RTSR &= ~(1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80003ea:	4b94      	ldr	r3, [pc, #592]	; (800063c <GPIO_INIT+0x2d0>)
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	7912      	ldrb	r2, [r2, #4]
 80003f2:	4611      	mov	r1, r2
 80003f4:	2201      	movs	r2, #1
 80003f6:	408a      	lsls	r2, r1
 80003f8:	43d2      	mvns	r2, r2
 80003fa:	4611      	mov	r1, r2
 80003fc:	4a8f      	ldr	r2, [pc, #572]	; (800063c <GPIO_INIT+0x2d0>)
 80003fe:	400b      	ands	r3, r1
 8000400:	6093      	str	r3, [r2, #8]
 8000402:	e035      	b.n	8000470 <GPIO_INIT+0x104>
			}else if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	795b      	ldrb	r3, [r3, #5]
 8000408:	2b05      	cmp	r3, #5
 800040a:	d117      	bne.n	800043c <GPIO_INIT+0xd0>
				EXTI->RTSR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800040c:	4b8b      	ldr	r3, [pc, #556]	; (800063c <GPIO_INIT+0x2d0>)
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	7912      	ldrb	r2, [r2, #4]
 8000414:	4611      	mov	r1, r2
 8000416:	2201      	movs	r2, #1
 8000418:	408a      	lsls	r2, r1
 800041a:	4611      	mov	r1, r2
 800041c:	4a87      	ldr	r2, [pc, #540]	; (800063c <GPIO_INIT+0x2d0>)
 800041e:	430b      	orrs	r3, r1
 8000420:	6093      	str	r3, [r2, #8]
				EXTI->FTSR &= ~(1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000422:	4b86      	ldr	r3, [pc, #536]	; (800063c <GPIO_INIT+0x2d0>)
 8000424:	68db      	ldr	r3, [r3, #12]
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	7912      	ldrb	r2, [r2, #4]
 800042a:	4611      	mov	r1, r2
 800042c:	2201      	movs	r2, #1
 800042e:	408a      	lsls	r2, r1
 8000430:	43d2      	mvns	r2, r2
 8000432:	4611      	mov	r1, r2
 8000434:	4a81      	ldr	r2, [pc, #516]	; (800063c <GPIO_INIT+0x2d0>)
 8000436:	400b      	ands	r3, r1
 8000438:	60d3      	str	r3, [r2, #12]
 800043a:	e019      	b.n	8000470 <GPIO_INIT+0x104>
			}else if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RFT){
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	795b      	ldrb	r3, [r3, #5]
 8000440:	2b06      	cmp	r3, #6
 8000442:	d115      	bne.n	8000470 <GPIO_INIT+0x104>
				EXTI->FTSR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000444:	4b7d      	ldr	r3, [pc, #500]	; (800063c <GPIO_INIT+0x2d0>)
 8000446:	68db      	ldr	r3, [r3, #12]
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	7912      	ldrb	r2, [r2, #4]
 800044c:	4611      	mov	r1, r2
 800044e:	2201      	movs	r2, #1
 8000450:	408a      	lsls	r2, r1
 8000452:	4611      	mov	r1, r2
 8000454:	4a79      	ldr	r2, [pc, #484]	; (800063c <GPIO_INIT+0x2d0>)
 8000456:	430b      	orrs	r3, r1
 8000458:	60d3      	str	r3, [r2, #12]
				EXTI->RTSR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800045a:	4b78      	ldr	r3, [pc, #480]	; (800063c <GPIO_INIT+0x2d0>)
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	7912      	ldrb	r2, [r2, #4]
 8000462:	4611      	mov	r1, r2
 8000464:	2201      	movs	r2, #1
 8000466:	408a      	lsls	r2, r1
 8000468:	4611      	mov	r1, r2
 800046a:	4a74      	ldr	r2, [pc, #464]	; (800063c <GPIO_INIT+0x2d0>)
 800046c:	430b      	orrs	r3, r1
 800046e:	6093      	str	r3, [r2, #8]
			}

			uint8_t temp1 = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	791b      	ldrb	r3, [r3, #4]
 8000474:	089b      	lsrs	r3, r3, #2
 8000476:	74fb      	strb	r3, [r7, #19]
			uint8_t temp2 = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	791b      	ldrb	r3, [r3, #4]
 800047c:	f003 0303 	and.w	r3, r3, #3
 8000480:	74bb      	strb	r3, [r7, #18]
			uint8_t PORTCODE = GPIO_BASE_ADDR_TO_CODE(pGPIO_Handle->pGPIOx);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a6e      	ldr	r2, [pc, #440]	; (8000640 <GPIO_INIT+0x2d4>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d024      	beq.n	80004d6 <GPIO_INIT+0x16a>
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a6c      	ldr	r2, [pc, #432]	; (8000644 <GPIO_INIT+0x2d8>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d01d      	beq.n	80004d2 <GPIO_INIT+0x166>
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a6b      	ldr	r2, [pc, #428]	; (8000648 <GPIO_INIT+0x2dc>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d016      	beq.n	80004ce <GPIO_INIT+0x162>
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a69      	ldr	r2, [pc, #420]	; (800064c <GPIO_INIT+0x2e0>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d00f      	beq.n	80004ca <GPIO_INIT+0x15e>
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a68      	ldr	r2, [pc, #416]	; (8000650 <GPIO_INIT+0x2e4>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d008      	beq.n	80004c6 <GPIO_INIT+0x15a>
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a66      	ldr	r2, [pc, #408]	; (8000654 <GPIO_INIT+0x2e8>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d101      	bne.n	80004c2 <GPIO_INIT+0x156>
 80004be:	2307      	movs	r3, #7
 80004c0:	e00a      	b.n	80004d8 <GPIO_INIT+0x16c>
 80004c2:	2300      	movs	r3, #0
 80004c4:	e008      	b.n	80004d8 <GPIO_INIT+0x16c>
 80004c6:	2304      	movs	r3, #4
 80004c8:	e006      	b.n	80004d8 <GPIO_INIT+0x16c>
 80004ca:	2303      	movs	r3, #3
 80004cc:	e004      	b.n	80004d8 <GPIO_INIT+0x16c>
 80004ce:	2302      	movs	r3, #2
 80004d0:	e002      	b.n	80004d8 <GPIO_INIT+0x16c>
 80004d2:	2301      	movs	r3, #1
 80004d4:	e000      	b.n	80004d8 <GPIO_INIT+0x16c>
 80004d6:	2300      	movs	r3, #0
 80004d8:	747b      	strb	r3, [r7, #17]
			SYSCFG->EXTICR[temp1] = PORTCODE << (temp2 * 4);                                                                            /*<It is GPIO port output @GPIO_PIN_SPEED register   >*/
 80004da:	7c7a      	ldrb	r2, [r7, #17]
 80004dc:	7cbb      	ldrb	r3, [r7, #18]
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	fa02 f103 	lsl.w	r1, r2, r3
 80004e4:	4a5c      	ldr	r2, [pc, #368]	; (8000658 <GPIO_INIT+0x2ec>)
 80004e6:	7cfb      	ldrb	r3, [r7, #19]
 80004e8:	3302      	adds	r3, #2
 80004ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			EXTI->IMR |= 1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber;
 80004ee:	4b53      	ldr	r3, [pc, #332]	; (800063c <GPIO_INIT+0x2d0>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	7912      	ldrb	r2, [r2, #4]
 80004f6:	4611      	mov	r1, r2
 80004f8:	2201      	movs	r2, #1
 80004fa:	408a      	lsls	r2, r1
 80004fc:	4611      	mov	r1, r2
 80004fe:	4a4f      	ldr	r2, [pc, #316]	; (800063c <GPIO_INIT+0x2d0>)
 8000500:	430b      	orrs	r3, r1
 8000502:	6013      	str	r3, [r2, #0]
    	    }

    temp = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]

    // configure the speed
    temp = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	799b      	ldrb	r3, [r3, #6]
 800050c:	461a      	mov	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	791b      	ldrb	r3, [r3, #4]
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	617b      	str	r3, [r7, #20]
    pGPIO_Handle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);                                          /*<It's clearing two bits before writing on it>*/
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	689a      	ldr	r2, [r3, #8]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	791b      	ldrb	r3, [r3, #4]
 8000524:	4619      	mov	r1, r3
 8000526:	2303      	movs	r3, #3
 8000528:	408b      	lsls	r3, r1
 800052a:	43db      	mvns	r3, r3
 800052c:	4619      	mov	r1, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	400a      	ands	r2, r1
 8000534:	609a      	str	r2, [r3, #8]
    pGPIO_Handle->pGPIOx->OSPEEDR |= temp;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	6899      	ldr	r1, [r3, #8]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	697a      	ldr	r2, [r7, #20]
 8000542:	430a      	orrs	r2, r1
 8000544:	609a      	str	r2, [r3, #8]
    temp = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]

    //3. configration the pupd
    temp = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	79db      	ldrb	r3, [r3, #7]
 800054e:	461a      	mov	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	791b      	ldrb	r3, [r3, #4]
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	fa02 f303 	lsl.w	r3, r2, r3
 800055a:	617b      	str	r3, [r7, #20]
    pGPIO_Handle->pGPIOx->PUPDR &= ~(0x3 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);                                            /*<It's clearing two bits before writing on it>*/
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	68da      	ldr	r2, [r3, #12]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	791b      	ldrb	r3, [r3, #4]
 8000566:	4619      	mov	r1, r3
 8000568:	2303      	movs	r3, #3
 800056a:	408b      	lsls	r3, r1
 800056c:	43db      	mvns	r3, r3
 800056e:	4619      	mov	r1, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	400a      	ands	r2, r1
 8000576:	60da      	str	r2, [r3, #12]
    pGPIO_Handle->pGPIOx->PUPDR |= temp;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	68d9      	ldr	r1, [r3, #12]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	697a      	ldr	r2, [r7, #20]
 8000584:	430a      	orrs	r2, r1
 8000586:	60da      	str	r2, [r3, #12]

    //4. configuration the optype.
    temp = 0; 
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
    temp = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinOPType << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	7a1b      	ldrb	r3, [r3, #8]
 8000590:	461a      	mov	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791b      	ldrb	r3, [r3, #4]
 8000596:	fa02 f303 	lsl.w	r3, r2, r3
 800059a:	617b      	str	r3, [r7, #20]
    pGPIO_Handle->pGPIOx->OTYPER &= ~(0x1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);                                           /*<It's clearing two bits before writing on it>*/
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	685a      	ldr	r2, [r3, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791b      	ldrb	r3, [r3, #4]
 80005a6:	4619      	mov	r1, r3
 80005a8:	2301      	movs	r3, #1
 80005aa:	408b      	lsls	r3, r1
 80005ac:	43db      	mvns	r3, r3
 80005ae:	4619      	mov	r1, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	400a      	ands	r2, r1
 80005b6:	605a      	str	r2, [r3, #4]
    pGPIO_Handle->pGPIOx->OTYPER |= temp;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	6859      	ldr	r1, [r3, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	697a      	ldr	r2, [r7, #20]
 80005c4:	430a      	orrs	r2, r1
 80005c6:	605a      	str	r2, [r3, #4]

    // 5. configure the alt function reg
    if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	795b      	ldrb	r3, [r3, #5]
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d131      	bne.n	8000634 <GPIO_INIT+0x2c8>
        uint8_t temp1, temp2;
        temp1 = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	08db      	lsrs	r3, r3, #3
 80005d6:	743b      	strb	r3, [r7, #16]
        temp2 = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	f003 0307 	and.w	r3, r3, #7
 80005e0:	73fb      	strb	r3, [r7, #15]
        pGPIO_Handle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));                                                                   /*<It's clearing two bits before writing on it>*/
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	7c3a      	ldrb	r2, [r7, #16]
 80005e8:	3208      	adds	r2, #8
 80005ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	220f      	movs	r2, #15
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	43db      	mvns	r3, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	7c3a      	ldrb	r2, [r7, #16]
 8000602:	4001      	ands	r1, r0
 8000604:	3208      	adds	r2, #8
 8000606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIO_Handle->pGPIOx->AFR[temp1] |= (pGPIO_Handle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	7c3a      	ldrb	r2, [r7, #16]
 8000610:	3208      	adds	r2, #8
 8000612:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	7a5b      	ldrb	r3, [r3, #9]
 800061a:	461a      	mov	r2, r3
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	fa02 f303 	lsl.w	r3, r2, r3
 8000624:	4618      	mov	r0, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	7c3a      	ldrb	r2, [r7, #16]
 800062c:	4301      	orrs	r1, r0
 800062e:	3208      	adds	r2, #8
 8000630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    }
}
 8000634:	bf00      	nop
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40013c00 	.word	0x40013c00
 8000640:	40020000 	.word	0x40020000
 8000644:	40020400 	.word	0x40020400
 8000648:	40020800 	.word	0x40020800
 800064c:	40020c00 	.word	0x40020c00
 8000650:	40021000 	.word	0x40021000
 8000654:	40021c00 	.word	0x40021c00
 8000658:	40013800 	.word	0x40013800

0800065c <SPI_PeriClockControl>:
 * 
 */
/*
 * Periphral Clock Setup
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	460b      	mov	r3, r1
 8000666:	70fb      	strb	r3, [r7, #3]

      if(EnorDi == ENABLE){
 8000668:	78fb      	ldrb	r3, [r7, #3]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d12b      	bne.n	80006c6 <SPI_PeriClockControl+0x6a>
        if(pSPIx == SPI1){
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a39      	ldr	r2, [pc, #228]	; (8000758 <SPI_PeriClockControl+0xfc>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d106      	bne.n	8000684 <SPI_PeriClockControl+0x28>
             SPI1_PCLK_EN();
 8000676:	4b39      	ldr	r3, [pc, #228]	; (800075c <SPI_PeriClockControl+0x100>)
 8000678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067a:	4a38      	ldr	r2, [pc, #224]	; (800075c <SPI_PeriClockControl+0x100>)
 800067c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000680:	6453      	str	r3, [r2, #68]	; 0x44
        }else if(pSPIx == SPI4){
            SPI4_PCLK_DI();
        }
    }

}
 8000682:	e063      	b.n	800074c <SPI_PeriClockControl+0xf0>
        }else if(pSPIx == SPI2){
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a36      	ldr	r2, [pc, #216]	; (8000760 <SPI_PeriClockControl+0x104>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d106      	bne.n	800069a <SPI_PeriClockControl+0x3e>
            SPI2_PCLK_EN();
 800068c:	4b33      	ldr	r3, [pc, #204]	; (800075c <SPI_PeriClockControl+0x100>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a32      	ldr	r2, [pc, #200]	; (800075c <SPI_PeriClockControl+0x100>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000698:	e058      	b.n	800074c <SPI_PeriClockControl+0xf0>
        }else if(pSPIx == SPI3){
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a31      	ldr	r2, [pc, #196]	; (8000764 <SPI_PeriClockControl+0x108>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d106      	bne.n	80006b0 <SPI_PeriClockControl+0x54>
            SPI3_PCLK_EN();
 80006a2:	4b2e      	ldr	r3, [pc, #184]	; (800075c <SPI_PeriClockControl+0x100>)
 80006a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a6:	4a2d      	ldr	r2, [pc, #180]	; (800075c <SPI_PeriClockControl+0x100>)
 80006a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ac:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006ae:	e04d      	b.n	800074c <SPI_PeriClockControl+0xf0>
        }else if(pSPIx == SPI4){
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4a2d      	ldr	r2, [pc, #180]	; (8000768 <SPI_PeriClockControl+0x10c>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d149      	bne.n	800074c <SPI_PeriClockControl+0xf0>
            SPI4_PCLK_EN();
 80006b8:	4b28      	ldr	r3, [pc, #160]	; (800075c <SPI_PeriClockControl+0x100>)
 80006ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006bc:	4a27      	ldr	r2, [pc, #156]	; (800075c <SPI_PeriClockControl+0x100>)
 80006be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006c2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80006c4:	e042      	b.n	800074c <SPI_PeriClockControl+0xf0>
        if(pSPIx == SPI1){
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a23      	ldr	r2, [pc, #140]	; (8000758 <SPI_PeriClockControl+0xfc>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d10c      	bne.n	80006e8 <SPI_PeriClockControl+0x8c>
             SPI1_PCLK_DI();
 80006ce:	4b23      	ldr	r3, [pc, #140]	; (800075c <SPI_PeriClockControl+0x100>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d2:	4a22      	ldr	r2, [pc, #136]	; (800075c <SPI_PeriClockControl+0x100>)
 80006d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006d8:	6253      	str	r3, [r2, #36]	; 0x24
 80006da:	4b20      	ldr	r3, [pc, #128]	; (800075c <SPI_PeriClockControl+0x100>)
 80006dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006de:	4a1f      	ldr	r2, [pc, #124]	; (800075c <SPI_PeriClockControl+0x100>)
 80006e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80006e4:	6253      	str	r3, [r2, #36]	; 0x24
}
 80006e6:	e031      	b.n	800074c <SPI_PeriClockControl+0xf0>
        }else if(pSPIx == SPI2){
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a1d      	ldr	r2, [pc, #116]	; (8000760 <SPI_PeriClockControl+0x104>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d10c      	bne.n	800070a <SPI_PeriClockControl+0xae>
            SPI2_PCLK_DI();
 80006f0:	4b1a      	ldr	r3, [pc, #104]	; (800075c <SPI_PeriClockControl+0x100>)
 80006f2:	6a1b      	ldr	r3, [r3, #32]
 80006f4:	4a19      	ldr	r2, [pc, #100]	; (800075c <SPI_PeriClockControl+0x100>)
 80006f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fa:	6213      	str	r3, [r2, #32]
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <SPI_PeriClockControl+0x100>)
 80006fe:	6a1b      	ldr	r3, [r3, #32]
 8000700:	4a16      	ldr	r2, [pc, #88]	; (800075c <SPI_PeriClockControl+0x100>)
 8000702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000706:	6213      	str	r3, [r2, #32]
}
 8000708:	e020      	b.n	800074c <SPI_PeriClockControl+0xf0>
        }else if(pSPIx == SPI3){
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a15      	ldr	r2, [pc, #84]	; (8000764 <SPI_PeriClockControl+0x108>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d10c      	bne.n	800072c <SPI_PeriClockControl+0xd0>
            SPI3_PCLK_DI();
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <SPI_PeriClockControl+0x100>)
 8000714:	6a1b      	ldr	r3, [r3, #32]
 8000716:	4a11      	ldr	r2, [pc, #68]	; (800075c <SPI_PeriClockControl+0x100>)
 8000718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800071c:	6213      	str	r3, [r2, #32]
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <SPI_PeriClockControl+0x100>)
 8000720:	6a1b      	ldr	r3, [r3, #32]
 8000722:	4a0e      	ldr	r2, [pc, #56]	; (800075c <SPI_PeriClockControl+0x100>)
 8000724:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000728:	6213      	str	r3, [r2, #32]
}
 800072a:	e00f      	b.n	800074c <SPI_PeriClockControl+0xf0>
        }else if(pSPIx == SPI4){
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <SPI_PeriClockControl+0x10c>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d10b      	bne.n	800074c <SPI_PeriClockControl+0xf0>
            SPI4_PCLK_DI();
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <SPI_PeriClockControl+0x100>)
 8000736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000738:	4a08      	ldr	r2, [pc, #32]	; (800075c <SPI_PeriClockControl+0x100>)
 800073a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800073e:	6253      	str	r3, [r2, #36]	; 0x24
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <SPI_PeriClockControl+0x100>)
 8000742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000744:	4a05      	ldr	r2, [pc, #20]	; (800075c <SPI_PeriClockControl+0x100>)
 8000746:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800074a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40013000 	.word	0x40013000
 800075c:	40023800 	.word	0x40023800
 8000760:	40003800 	.word	0x40003800
 8000764:	40003c00 	.word	0x40003c00
 8000768:	40013400 	.word	0x40013400

0800076c <SPI_INIT>:
 * 
 */
/*
 * Periphral Clock Setup
 */
void SPI_INIT(SPI_Handle_t *pSPI_Handle){
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
    //0. Enable_prepheral_clock
    SPI_PeriClockControl(pSPI_Handle->pSPIx, ENABLE);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2101      	movs	r1, #1
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff6e 	bl	800065c <SPI_PeriClockControl>
    // the first lets configure the Sip_cr1 reg
    uint32_t tempreg = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
    //1. configure the device mode 
    tempreg |= pSPI_Handle->SPI_Config.SPI_DeviceMode << SPI_CR1_MSTR;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	791b      	ldrb	r3, [r3, #4]
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	461a      	mov	r2, r3
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	4313      	orrs	r3, r2
 8000790:	60fb      	str	r3, [r7, #12]

    //2. configure the bus config 
    if(pSPI_Handle->SPI_Config.SPI_BusConfig == SPI_fULL_DUPLEX){
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	795b      	ldrb	r3, [r3, #5]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d104      	bne.n	80007a4 <SPI_INIT+0x38>
        // bidiraction mode should be cleared
        tempreg &= ~(1 << SPI_CR1_BDIMODE);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	e014      	b.n	80007ce <SPI_INIT+0x62>
    }else if (pSPI_Handle->SPI_Config.SPI_BusConfig == SPI_HALF_DUPLEX){
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	795b      	ldrb	r3, [r3, #5]
 80007a8:	2b02      	cmp	r3, #2
 80007aa:	d104      	bne.n	80007b6 <SPI_INIT+0x4a>
       // bidiraction mode should be set
        tempreg |= (1 << SPI_CR1_BDIMODE);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	e00b      	b.n	80007ce <SPI_INIT+0x62>
    }else if (pSPI_Handle->SPI_Config.SPI_BusConfig == SPI_SIMPLE_RXONLY){
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	795b      	ldrb	r3, [r3, #5]
 80007ba:	2b03      	cmp	r3, #3
 80007bc:	d107      	bne.n	80007ce <SPI_INIT+0x62>
         // bidiraction mode should be cleared
         tempreg &= ~(1 << SPI_CR1_BDIMODE);
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007c4:	60fb      	str	r3, [r7, #12]
         // RXONLY bit mast be set.
         tempreg |= (1 << SPI_CR1_RXONLY);
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007cc:	60fb      	str	r3, [r7, #12]
    }
    //3.configure SPI_sclkSpeed
      tempreg |= pSPI_Handle->SPI_Config.SPI_sclkSpeed << SPI_CR1_BR;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	799b      	ldrb	r3, [r3, #6]
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	461a      	mov	r2, r3
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	4313      	orrs	r3, r2
 80007da:	60fb      	str	r3, [r7, #12]
    // 4. configure SPI_DFF
      tempreg |= pSPI_Handle->SPI_Config.SPI_DFF << SPI_CR1_DFF;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	79db      	ldrb	r3, [r3, #7]
 80007e0:	02db      	lsls	r3, r3, #11
 80007e2:	461a      	mov	r2, r3
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	60fb      	str	r3, [r7, #12]
    // 5. configure SPI_CPOL
      tempreg |= pSPI_Handle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	7a1b      	ldrb	r3, [r3, #8]
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	461a      	mov	r2, r3
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	60fb      	str	r3, [r7, #12]
    // 6. configure SPI_CPHA  
      tempreg |= pSPI_Handle->SPI_Config.SPI_CPHA <<  SPI_CR1_CPHA;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	7a5b      	ldrb	r3, [r3, #9]
 80007fc:	461a      	mov	r2, r3
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	4313      	orrs	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]
     //7. configure SPI_SSM
      tempreg |= pSPI_Handle->SPI_Config.SPI_SSM << SPI_CR1_SSM;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	7a9b      	ldrb	r3, [r3, #10]
 8000808:	025b      	lsls	r3, r3, #9
 800080a:	461a      	mov	r2, r3
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	4313      	orrs	r3, r2
 8000810:	60fb      	str	r3, [r7, #12]

      // initialzation for CR1
      pSPI_Handle->pSPIx->SPI_CR1 = tempreg;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	601a      	str	r2, [r3, #0]
}
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <Spi_GetFlagStatus>:
/*
 * Data send and Recieve.
*/


uint8_t Spi_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
 800082a:	6039      	str	r1, [r7, #0]
    if(pSPIx ->SPI_SR & FlagName){
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	689a      	ldr	r2, [r3, #8]
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	4013      	ands	r3, r2
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <Spi_GetFlagStatus+0x1a>
        return FLAG_SET;
 8000838:	2301      	movs	r3, #1
 800083a:	e000      	b.n	800083e <Spi_GetFlagStatus+0x1c>
    }
    return FLAG_RESET;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <SPI_SendData>:
 * Periphral Clock Setup
 */



void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
     while(Len > 0){
 8000854:	e027      	b.n	80008a6 <SPI_SendData+0x5e>
        //1. wait until TXE Is set
        while(Spi_GetFlagStatus(pSPIx, SPI_SR_TXE_FLAG) == FLAG_RESET);  // first method
 8000856:	bf00      	nop
 8000858:	2102      	movs	r1, #2
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f7ff ffe1 	bl	8000822 <Spi_GetFlagStatus>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d0f8      	beq.n	8000858 <SPI_SendData+0x10>
       // while(!(pSPIx -> SPI_SR & (SPI_SR_TXE << 1)));                // secand method
       // 2. CHECK DFF bit in cr1
       if ((pSPIx -> SPI_CR1 & (1 << SPI_CR1_DFF))){
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800086e:	2b00      	cmp	r3, #0
 8000870:	d00e      	beq.n	8000890 <SPI_SendData+0x48>
        // 16 BIT DFF
        // 1. load the data in the dr register
        pSPIx -> SPI_DR = *((uint16_t*)pTxBuffer);
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	461a      	mov	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	60da      	str	r2, [r3, #12]
        Len--;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	607b      	str	r3, [r7, #4]
        Len--;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3b01      	subs	r3, #1
 8000886:	607b      	str	r3, [r7, #4]
        (uint16_t*)pTxBuffer++;
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	3301      	adds	r3, #1
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	e00a      	b.n	80008a6 <SPI_SendData+0x5e>
       }else{
        // 8 bit DFF
        pSPIx -> SPI_DR = *pTxBuffer;
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	60da      	str	r2, [r3, #12]
         Len--;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3b01      	subs	r3, #1
 800089e:	607b      	str	r3, [r7, #4]
         pTxBuffer++;
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	3301      	adds	r3, #1
 80008a4:	60bb      	str	r3, [r7, #8]
     while(Len > 0){
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d1d4      	bne.n	8000856 <SPI_SendData+0xe>
       }
       
     }
} 
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <SPI_PeriControl>:
void SPI_RecieveData(SPI_RegDef_t *pSPIOx, uint8_t *pTxBuffer, uint32_t Len); 


void SPI_PeriControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 80008b6:	b480      	push	{r7}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
 80008be:	460b      	mov	r3, r1
 80008c0:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE){
 80008c2:	78fb      	ldrb	r3, [r7, #3]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d106      	bne.n	80008d6 <SPI_PeriControl+0x20>
        pSPIx->SPI_CR1 |= (1<< SPI_CR1_SPE);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	601a      	str	r2, [r3, #0]
    }else{
        pSPIx->SPI_CR1 &= ~(1<< SPI_CR1_SPE);
    }
}
 80008d4:	e005      	b.n	80008e2 <SPI_PeriControl+0x2c>
        pSPIx->SPI_CR1 &= ~(1<< SPI_CR1_SPE);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	601a      	str	r2, [r3, #0]
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <SPI_SSIConfig>:
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	460b      	mov	r3, r1
 80008f6:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE){
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d106      	bne.n	800090c <SPI_SSIConfig+0x20>
        pSPIx->SPI_CR1 |= (1<< SPI_CR1_SSI);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	601a      	str	r2, [r3, #0]
    }else{
        pSPIx->SPI_CR1 &= ~(1<< SPI_CR1_SSI);
    }
}
 800090a:	e005      	b.n	8000918 <SPI_SSIConfig+0x2c>
        pSPIx->SPI_CR1 &= ~(1<< SPI_CR1_SSI);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	601a      	str	r2, [r3, #0]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
	...

08000924 <SPI2_GPIO_Init>:
// spi2 mosi--> PB15
// spi miso-->PB14
// Spi2  sck--> PB13
// spi2 nss--> PB12
// Alt func-->AF05
SPI2_GPIO_Init(void){
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
	GPIO_Handle SPIPin;
	SPIPin.pGPIOx = GPIOB;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <SPI2_GPIO_Init+0x40>)
 800092c:	607b      	str	r3, [r7, #4]
	SPIPin.GPIO_PinConfig.GPIO_PinMode              = GPIO_MODE_ALTFN;
 800092e:	2302      	movs	r3, #2
 8000930:	727b      	strb	r3, [r7, #9]
    SPIPin.GPIO_PinConfig.GPIO_PinAltFunMode        = 5;
 8000932:	2305      	movs	r3, #5
 8000934:	737b      	strb	r3, [r7, #13]
    SPIPin.GPIO_PinConfig.GPIO_PinOPType            = GPIO_OP_TYOE_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	733b      	strb	r3, [r7, #12]
    SPIPin.GPIO_PinConfig.GPIO_PinPuPdControl       = GPIO_NO_PUPD;
 800093a:	2300      	movs	r3, #0
 800093c:	72fb      	strb	r3, [r7, #11]
    SPIPin.GPIO_PinConfig.GPIO_PinSpeed             = GPIO_SPEED_FAST;
 800093e:	2302      	movs	r3, #2
 8000940:	72bb      	strb	r3, [r7, #10]
    SPIPin.GPIO_PinConfig.GPIO_PinNumber            = GPIO_PIN_NO_13;           // SPI2_SLK
 8000942:	230d      	movs	r3, #13
 8000944:	723b      	strb	r3, [r7, #8]
    GPIO_INIT(&SPIPin);
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fd0f 	bl	800036c <GPIO_INIT>
   // SPIPin.GPIO_PinConfig.GPIO_PinNumber            = GPIO_PIN_NO_14;           // SPI2_MISO
   // GPIO_INIT(&SPIPin);
    SPIPin.GPIO_PinConfig.GPIO_PinNumber            = GPIO_PIN_NO_15;           // SPI2_MOSI
 800094e:	230f      	movs	r3, #15
 8000950:	723b      	strb	r3, [r7, #8]
    GPIO_INIT(&SPIPin);
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fd09 	bl	800036c <GPIO_INIT>
    //SPIPin.GPIO_PinConfig.GPIO_PinNumber            = GPIO_PIN_NO_12;           // SPI2_nss
    //GPIO_INIT(&SPIPin);
}
 800095a:	bf00      	nop
 800095c:	4618      	mov	r0, r3
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40020400 	.word	0x40020400

08000968 <SPI2_INIT>:




SPI2_INIT(void){
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
    SPI_Handle_t SPI2Handle;
    SPI2Handle.pSPIx = SPI2;
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <SPI2_INIT+0x38>)
 8000970:	607b      	str	r3, [r7, #4]
    SPI2Handle.SPI_Config.SPI_BusConfig         = SPI_fULL_DUPLEX;
 8000972:	2301      	movs	r3, #1
 8000974:	727b      	strb	r3, [r7, #9]
    SPI2Handle.SPI_Config.SPI_DeviceMode        = SPI_DEVICE_MODE_MASTER;
 8000976:	2301      	movs	r3, #1
 8000978:	723b      	strb	r3, [r7, #8]
    SPI2Handle.SPI_Config.SPI_sclkSpeed         = SPI_CLK_SPEED_DIV2;
 800097a:	2300      	movs	r3, #0
 800097c:	72bb      	strb	r3, [r7, #10]
    SPI2Handle.SPI_Config.SPI_DFF               = SPI_DFF_8BIT;
 800097e:	2300      	movs	r3, #0
 8000980:	72fb      	strb	r3, [r7, #11]
    SPI2Handle.SPI_Config.SPI_CPOL              = SPI_CPOL_LOW;
 8000982:	2301      	movs	r3, #1
 8000984:	733b      	strb	r3, [r7, #12]
    SPI2Handle.SPI_Config.SPI_CPHA              = SPI_CPHA_LOW;
 8000986:	2301      	movs	r3, #1
 8000988:	737b      	strb	r3, [r7, #13]
    SPI2Handle.SPI_Config.SPI_SSM               = SPI_SSM_EN;
 800098a:	2301      	movs	r3, #1
 800098c:	73bb      	strb	r3, [r7, #14]
    SPI_INIT(&SPI2Handle);
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff feeb 	bl	800076c <SPI_INIT>

}
 8000996:	bf00      	nop
 8000998:	4618      	mov	r0, r3
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40003800 	.word	0x40003800

080009a4 <main>:
int main(void)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
    char user_data[] = "Hallo, world";
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <main+0x48>)
 80009ac:	463c      	mov	r4, r7
 80009ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009b0:	c407      	stmia	r4!, {r0, r1, r2}
 80009b2:	7023      	strb	r3, [r4, #0]

   SPI2_GPIO_Init();
 80009b4:	f7ff ffb6 	bl	8000924 <SPI2_GPIO_Init>
   SPI2_INIT();
 80009b8:	f7ff ffd6 	bl	8000968 <SPI2_INIT>
    // LINE CONNECT NSS INTERNAL TO VCC
   SPI_SSIConfig(SPI2,ENABLE);
 80009bc:	2101      	movs	r1, #1
 80009be:	480c      	ldr	r0, [pc, #48]	; (80009f0 <main+0x4c>)
 80009c0:	f7ff ff94 	bl	80008ec <SPI_SSIConfig>
   //Enable the spi     
   SPI_PeriControl(SPI2, ENABLE);
 80009c4:	2101      	movs	r1, #1
 80009c6:	480a      	ldr	r0, [pc, #40]	; (80009f0 <main+0x4c>)
 80009c8:	f7ff ff75 	bl	80008b6 <SPI_PeriControl>
   SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 80009cc:	463b      	mov	r3, r7
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fc00 	bl	80001d4 <strlen>
 80009d4:	4602      	mov	r2, r0
 80009d6:	463b      	mov	r3, r7
 80009d8:	4619      	mov	r1, r3
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <main+0x4c>)
 80009dc:	f7ff ff34 	bl	8000848 <SPI_SendData>
   SPI_PeriControl(SPI2, DISABLE);
 80009e0:	2100      	movs	r1, #0
 80009e2:	4803      	ldr	r0, [pc, #12]	; (80009f0 <main+0x4c>)
 80009e4:	f7ff ff67 	bl	80008b6 <SPI_PeriControl>

   while (1);
 80009e8:	e7fe      	b.n	80009e8 <main+0x44>
 80009ea:	bf00      	nop
 80009ec:	08000aa8 	.word	0x08000aa8
 80009f0:	40003800 	.word	0x40003800

080009f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009f4:	480d      	ldr	r0, [pc, #52]	; (8000a2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009fc:	480c      	ldr	r0, [pc, #48]	; (8000a30 <LoopForever+0x6>)
  ldr r1, =_edata
 80009fe:	490d      	ldr	r1, [pc, #52]	; (8000a34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a00:	4a0d      	ldr	r2, [pc, #52]	; (8000a38 <LoopForever+0xe>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a04:	e002      	b.n	8000a0c <LoopCopyDataInit>

08000a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0a:	3304      	adds	r3, #4

08000a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a10:	d3f9      	bcc.n	8000a06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a14:	4c0a      	ldr	r4, [pc, #40]	; (8000a40 <LoopForever+0x16>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a18:	e001      	b.n	8000a1e <LoopFillZerobss>

08000a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a1c:	3204      	adds	r2, #4

08000a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a20:	d3fb      	bcc.n	8000a1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a22:	f000 f811 	bl	8000a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a26:	f7ff ffbd 	bl	80009a4 <main>

08000a2a <LoopForever>:

LoopForever:
    b LoopForever
 8000a2a:	e7fe      	b.n	8000a2a <LoopForever>
  ldr   r0, =_estack
 8000a2c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a34:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a38:	08000ac0 	.word	0x08000ac0
  ldr r2, =_sbss
 8000a3c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a40:	2000001c 	.word	0x2000001c

08000a44 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC_IRQHandler>
	...

08000a48 <__libc_init_array>:
 8000a48:	b570      	push	{r4, r5, r6, lr}
 8000a4a:	4d0d      	ldr	r5, [pc, #52]	; (8000a80 <__libc_init_array+0x38>)
 8000a4c:	4c0d      	ldr	r4, [pc, #52]	; (8000a84 <__libc_init_array+0x3c>)
 8000a4e:	1b64      	subs	r4, r4, r5
 8000a50:	10a4      	asrs	r4, r4, #2
 8000a52:	2600      	movs	r6, #0
 8000a54:	42a6      	cmp	r6, r4
 8000a56:	d109      	bne.n	8000a6c <__libc_init_array+0x24>
 8000a58:	4d0b      	ldr	r5, [pc, #44]	; (8000a88 <__libc_init_array+0x40>)
 8000a5a:	4c0c      	ldr	r4, [pc, #48]	; (8000a8c <__libc_init_array+0x44>)
 8000a5c:	f000 f818 	bl	8000a90 <_init>
 8000a60:	1b64      	subs	r4, r4, r5
 8000a62:	10a4      	asrs	r4, r4, #2
 8000a64:	2600      	movs	r6, #0
 8000a66:	42a6      	cmp	r6, r4
 8000a68:	d105      	bne.n	8000a76 <__libc_init_array+0x2e>
 8000a6a:	bd70      	pop	{r4, r5, r6, pc}
 8000a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a70:	4798      	blx	r3
 8000a72:	3601      	adds	r6, #1
 8000a74:	e7ee      	b.n	8000a54 <__libc_init_array+0xc>
 8000a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a7a:	4798      	blx	r3
 8000a7c:	3601      	adds	r6, #1
 8000a7e:	e7f2      	b.n	8000a66 <__libc_init_array+0x1e>
 8000a80:	08000ab8 	.word	0x08000ab8
 8000a84:	08000ab8 	.word	0x08000ab8
 8000a88:	08000ab8 	.word	0x08000ab8
 8000a8c:	08000abc 	.word	0x08000abc

08000a90 <_init>:
 8000a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a92:	bf00      	nop
 8000a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a96:	bc08      	pop	{r3}
 8000a98:	469e      	mov	lr, r3
 8000a9a:	4770      	bx	lr

08000a9c <_fini>:
 8000a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a9e:	bf00      	nop
 8000aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aa2:	bc08      	pop	{r3}
 8000aa4:	469e      	mov	lr, r3
 8000aa6:	4770      	bx	lr
